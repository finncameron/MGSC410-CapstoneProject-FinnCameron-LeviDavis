# -*- coding: utf-8 -*-
"""Code for Data Cleaning and Preprocessing, MGSC 410 Capstone Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rajLgdEVFMTDWng-ikY1B84s1aiH3Zen
"""

# Import libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/content/used_cars_subset.csv')

# Display first rows
df.head()

# Define columns to drop
columns_to_drop = ['vin', 'listing_id', 'main_picture_url', 'sp_id',
                   'sp_name', 'trimId', 'power', 'torque', 'bed', 'bed_height',
                   'bed_length', 'combine_fuel_economy']

# Drop unwanted columns
df = df.drop(columns=columns_to_drop, axis=1)

# Define numerical features
numerical_features = [
    'back_legroom', 'city_fuel_economy','daysonmarket', 'engine_cylinders',
    'engine_displacement', 'front_legroom', 'fuel_tank_volume', 'height',
    'highway_fuel_economy', 'horsepower', 'latitude', 'length', 'longitude',
    'maximum_seating', 'mileage', 'owner_count', 'price', 'savings_amount',
    'wheelbase', 'width', 'year', 'max_highway_range', 'car_age', 'mileage_per_year'
]

# Define categorical features
categorical_features = [
    'body_type', 'cabin', 'city', 'dealer_zip', 'description',
    'engine_type', 'exterior_color', 'fleet', 'frame_damaged',
    'franchise_dealer', 'franchise_make', 'fuel_type', 'has_accidents',
    'interior_color', 'isCab', 'is_certified', 'is_cpo', 'is_new',
    'is_oemcpo', 'listed_date', 'listing_color', 'major_options',
    'make_name', 'model_name', 'salvage', 'seller_rating', 'theft_title',
    'transmission', 'transmission_display', 'trim_name',
    'vehicle_damage_category', 'wheel_system', 'wheel_system_display', 'is_luxury_brand'
]

# Define function to extract numeric values
def extract_numeric(column):
    return column.str.extract(r'(\d+\.?\d*)').astype(float)

# Apply extraction to numerical features
for col in numerical_features:
    if col in df.columns:
        df[col] = extract_numeric(df[col].astype(str))

## New Features ##

# Fuel Cost Efficiency (Approximate highway range based on fuel tank volume)
df['max_highway_range'] = df['fuel_tank_volume'] * df['highway_fuel_economy']

# Age of the Car
df['car_age'] = 2024 - df['year']

# Mileage per Year
df['mileage_per_year'] = df['mileage'] / np.maximum(df['car_age'], 1)

# Define luxury brands
luxury_brands = ['Lamborghini', 'Bentley', 'Porsche', 'Rolls-Royce',
                 'McLaren', 'Mercedes-Benz', 'Alfa Romeo']
df['is_luxury_brand'] = df['make_name'].apply(lambda x: 1 if x in luxury_brands else 0)

#2: No accidents, no salvage, 1: Either accidents or salvage (but not both), 0: Both accidents and salvage.
df['has_accidents'] = df['has_accidents'].fillna(False)  # Replace NaN with False (no accidents)
df['salvage'] = df['salvage'].fillna(False)  # Replace NaN with False (no salvage)

# Now create the condition_score
df['condition_score'] = df['has_accidents'].map({False: 1, True: 0}) + df['salvage'].map({False: 1, True: 0})

# Handle missing values in numerical features
for col in numerical_features:
    df[col].fillna(df[col].mean(), inplace=True)

# Handle outliers in numerical features using IQR method
for col in numerical_features:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Cap outliers
    df[col] = np.where(df[col] < lower_bound, lower_bound, df[col])
    df[col] = np.where(df[col] > upper_bound, upper_bound, df[col])

# Clean categorical features
for col in categorical_features:
    df[col] = df[col].fillna('unknown').astype(str).str.lower().str.strip()

# Apply label encoding to categorical features
label_encoders = {}
for col in categorical_features:
    encoder = LabelEncoder()
    df[col] = encoder.fit_transform(df[col])
    label_encoders[col] = encoder

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

from google.colab import files
# Save cleaned DataFrame as CSV
df.to_csv('cleaned_used_car_data.csv', index=False)

# Download the CSV file
files.download('cleaned_used_car_data.csv')