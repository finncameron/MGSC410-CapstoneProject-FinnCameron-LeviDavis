# -*- coding: utf-8 -*-
"""Code for EDA and Result Visualizations, MGSC 410 Capstone Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WfiiHIoo-keiOquBwNXnmcXTUsdNKAwv
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load dataset
df = pd.read_csv('/content/cleaned_used_car_data.csv')
df.head()

## XG Boost Model ##
# Prepare data
X = df.drop(columns=['price'])
y = df['price']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize model
xgb_model = xgb.XGBRegressor(
    n_estimators=100,
    max_depth=6,
    learning_rate=0.1,
    objective='reg:squarederror',
    random_state=42
)

# Train model
xgb_model.fit(X_train, y_train)

# Make predictions
y_train_pred = xgb_model.predict(X_train)
y_test_pred = xgb_model.predict(X_test)

# Average price of cars in the dataset
average_price = df['price'].mean()

print(f"The average price of cars in the dataset is: ${average_price:.2f}")

# Heatmap of buyer demand by car type and condition score
numerical_features = [
    'back_legroom', 'city_fuel_economy', 'daysonmarket', 'engine_cylinders',
    'engine_displacement', 'front_legroom', 'fuel_tank_volume', 'height',
    'highway_fuel_economy', 'horsepower', 'latitude', 'length', 'longitude',
    'maximum_seating', 'mileage', 'owner_count', 'price', 'savings_amount',
    'wheelbase', 'width', 'year'
]

# Ensure 'numerical_features' columns are in df
selected_columns = [col for col in numerical_features if col in df.columns]

plt.figure(figsize=(12, 8))
correlation_matrix = df[selected_columns].corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Numerical Features")
plt.show()

# Plot of top 10 feature importances
xgb.plot_importance(xgb_model, importance_type='weight', max_num_features=10)
plt.title("Top 10 Feature Importances")
plt.show()

# Plot of least 10 important features from XGBoost model
feature_importance = xgb_model.get_booster().get_score(importance_type='weight')

importance_df = pd.DataFrame.from_dict(feature_importance, orient='index', columns=['Importance'])
importance_df.reset_index(inplace=True)
importance_df.columns = ['Feature', 'Importance']

least_important_features = importance_df.sort_values(by='Importance', ascending=True).head(10)

plt.figure(figsize=(8, 6))
plt.barh(least_important_features['Feature'], least_important_features['Importance'], color='skyblue')
plt.title('Least 10 Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

# Revert standardized prices to original scale and plot actual vs predicted prices
original_mean = 29349.58
original_std = 20923.46

y_test_original = y_test * original_std + original_mean
y_pred_original = y_test_pred * original_std + original_mean  # Use y_test_pred here

plt.figure(figsize=(8, 6))
plt.scatter(y_test_original, y_pred_original, alpha=0.6, color='blue', label='Predicted vs Actual')
plt.plot(
    [y_test_original.min(), y_test_original.max()],
    [y_test_original.min(), y_test_original.max()],
    color='red',
    linestyle='--',
    label='Perfect Prediction'
)

plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Prices (Original Scale)")
plt.legend()
plt.grid(True)
plt.show()

# Boxplot of price by car age
sns.boxplot(x='car_age', y='price', data=df, palette='viridis')
plt.title('Price Distribution by Car Age')
plt.xlabel('Car Age (years)')
plt.ylabel('Price')
plt.show()

# Average price by car age
avg_price_by_age = df.groupby('car_age')['price'].mean().reset_index()

sns.lineplot(x='car_age', y='price', data=avg_price_by_age, marker='o', color='green')
plt.title('Average Price by Car Age')
plt.xlabel('Car Age (years)')
plt.ylabel('Average Price')
plt.show()